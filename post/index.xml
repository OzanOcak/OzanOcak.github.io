<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Warm journeys of bits and bytes</title>
    <link>https://bitsandbytes.github.io/post/</link>
    <description>Recent content in Posts on Warm journeys of bits and bytes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 May 2022 00:05:06 -0400</lastBuildDate><atom:link href="https://bitsandbytes.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>cURL for CRUD </title>
      <link>https://bitsandbytes.github.io/post/curl/</link>
      <pubDate>Wed, 04 May 2022 00:05:06 -0400</pubDate>
      
      <guid>https://bitsandbytes.github.io/post/curl/</guid>
      <description>BASH echo &amp;quot;Hello world!&amp;quot; echo $? mkdir folder &amp;amp;&amp;amp; cd ./folder vim test.sh $? comment will return last return in the stuck which will be either 0 or 1
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  #!/bin/bash  set -e function unit_test(){ echo &amp;#34;running unit test&amp;#34; return 1 } function integration_test(){ echo &amp;#34;integration unit test&amp;#34; return 0 } function e2e_test(){ echo &amp;#34;e2e unit test&amp;#34; return 0 } set +e unit_test set -e integration_test e2e_test   we need to give execution permission to executable file</description>
    </item>
    
    <item>
      <title>The language with two null pointer</title>
      <link>https://bitsandbytes.github.io/post/advanced_js/</link>
      <pubDate>Thu, 31 Mar 2022 00:05:06 -0400</pubDate>
      
      <guid>https://bitsandbytes.github.io/post/advanced_js/</guid>
      <description>Javascript is a beautiful language As a sharepoint front-end developer, I use javascript and jquery for last 6 years. I never tried to understand it because of the backlash toward the language. Apparently it was a fault since I think there us nothing wrong with it.
Almost all the languages are not secure if you don&amp;rsquo;t give enough attention to code. For sure JavaScript requires little bit more.
What are the problems and their solutions   Avoid Global Variables.</description>
    </item>
    
    <item>
      <title>Writing a simple cpp game with Sfml</title>
      <link>https://bitsandbytes.github.io/post/sfml/</link>
      <pubDate>Thu, 27 May 2021 00:05:06 -0400</pubDate>
      
      <guid>https://bitsandbytes.github.io/post/sfml/</guid>
      <description>Setting up environment on mac We going to build simple snake game by using sfml library on mac os environment. I prefer creating projects with Makefile rather than using build-in tools so We will not use Xcode.First We need to download sfml library
1  sudo brew install libsfml-dev   then We will add easy c++ project extension in VSCode and after pressing Ctrl+Shift+P, search easy cpp create new project and finally We will create with clang++.</description>
    </item>
    
    <item>
      <title>Writing a simple Linux Kernel on Armv8 - 6</title>
      <link>https://bitsandbytes.github.io/post/article7/</link>
      <pubDate>Wed, 26 May 2021 00:23:56 -0400</pubDate>
      
      <guid>https://bitsandbytes.github.io/post/article7/</guid>
      <description>Interrupts First we need to implement our vector interrupt table
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134  #include &amp;#34;entry.</description>
    </item>
    
    <item>
      <title>Writing a simple Linux Kernel on Armv8 - 5</title>
      <link>https://bitsandbytes.github.io/post/article6/</link>
      <pubDate>Wed, 26 May 2021 00:22:56 -0400</pubDate>
      
      <guid>https://bitsandbytes.github.io/post/article6/</guid>
      <description>Boot to Exception level 1 We need to add system register header file then activate neccessary registers in master section before return it , lastly we jump exception level 1 in order to allocate memory in bss section.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #include &amp;#34;sysregs.h&amp;#34;  master: ldr x0, =SCTLR_VALUE_MMU_DISABLED msr sctlr_el1, x0 ldr x0, =HCR_VALUE msr hcr_el2, x0 ldr x0, =SCR_VALUE msr scr_el3, x0 ldr x0, =SPSR_VALUE msr spsr_el3, x0 adr x0, el1_entry msr elr_el3, x0 eret el1_entry: adr x0, bss_begin adr x1, bss_end sub x1, x1, x0 bl memzero   All the system register information base on the booklet of Arm architecture reference manual Armv8.</description>
    </item>
    
    <item>
      <title>Writing a simple Linux Kernel on Armv8 -4 </title>
      <link>https://bitsandbytes.github.io/post/article5/</link>
      <pubDate>Wed, 26 May 2021 00:10:56 -0400</pubDate>
      
      <guid>https://bitsandbytes.github.io/post/article5/</guid>
      <description>GPIO of Arm We take the GPIO information from Broadcast Arm cpu booklet in gpio chapters
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  #pragma once  #include &amp;#34;peripherals/gpio.h&amp;#34; typedef enum _GpioFunc { GFInput = 0, GFOutput = 1, GFAlt0 = 4, GFAlt1 = 5, GFAlt2 = 6, GFAlt3 = 7, GFAlt4 = 3, GFAlt5 = 2 } GpioFunc; void gpio_pin_set_func(u8 pinNumber, GpioFunc func); void gpio_pin_enable(u8 pinNumber);   Now we can write gpio.</description>
    </item>
    
    <item>
      <title>Writing a simple Linux Kernel on Armv8 - 3 </title>
      <link>https://bitsandbytes.github.io/post/article4/</link>
      <pubDate>Mon, 24 May 2021 00:10:56 -0400</pubDate>
      
      <guid>https://bitsandbytes.github.io/post/article4/</guid>
      <description>Kernel boot process preparation Now we can start adding header files under include folder. We will first create aux.h base.h and gpio.h files under peripherals subfolder. Raspberry Pi3 starts from 0x3F000000 adress, below is reserved for interrupt vector table and Raspberry Pi starts from 0xFE000000 adress.
1 2 3 4 5 6 7 8 9 10 11 12 13  #pragma once  #if RPI_VERSION == 3 #define PBASE 0x3F000000  #elif RPI_VERSION == 4 #define PBASE 0xFE000000  #else #define PBASE 0 #error RPI_VERSION NOT DEFINED  #endif   We can rename data types shorter names for convinient.</description>
    </item>
    
    <item>
      <title>Writing a simple Linux Kernel on Armv8 - 2</title>
      <link>https://bitsandbytes.github.io/post/article3/</link>
      <pubDate>Sat, 22 May 2021 00:10:56 -0400</pubDate>
      
      <guid>https://bitsandbytes.github.io/post/article3/</guid>
      <description>This is a documentation of writing bare operating system on hardware specifically on raspberry pi. This doc originally developed by Sergey Matyukevich then created another tutorial upon original project by Rocky Pulley.
Makefile We first need to specify the environment for booting in config.txt and create a makefile in order to not to call all dependencies every single time when we build the project. In the makefile we locate boot directory then determine the type of arm gnu 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  RPI_VERSION ?</description>
    </item>
    
    <item>
      <title>Writing a simple Linux Kernel-1</title>
      <link>https://bitsandbytes.github.io/post/article2/</link>
      <pubDate>Wed, 14 Apr 2021 00:05:06 -0400</pubDate>
      
      <guid>https://bitsandbytes.github.io/post/article2/</guid>
      <description>Setting up aarch64 platform within docker container on x86 architecture Docker Desktop for Mac ships with hypervisors for the host OS. The hypervisor is responsible for running a lightweight Linux kernel (LinuxKit), which is included as part of Docker Desktop. This lightweight container OS comes packaged with the QEMU emulator, and comes pre-configured with binfmt_misc to run binaries of any supported architecture. Binfmt_misc is a kernel subsystem which allows to set the magic numbers of a binary file to specific actions for their execution.</description>
    </item>
    
    <item>
      <title>How did I build this website?</title>
      <link>https://bitsandbytes.github.io/post/article1/</link>
      <pubDate>Mon, 12 Apr 2021 00:05:06 -0400</pubDate>
      
      <guid>https://bitsandbytes.github.io/post/article1/</guid>
      <description>Hugo is a static HTML and CSS website generator written in Go. It is optimized for speed, ease of use, and configurability. Hugo takes a directory with content and templates and renders them into a full HTML website.
I chose Hugo to this blog and store it in github as a static page. First I install hugo with brew then create 2 seperate github repository; one for all the source codes and the other for staic files in public folder.</description>
    </item>
    
  </channel>
</rss>
